$orbitItemSize: 4.5rem;
$map: (
  ring-0: 4,
  ring-1: 3,
  ring-2: 4,
  ring-3: 3,
);
$lastRing: 3;

.orbit-icon {
  width: $orbitItemSize;
  height: $orbitItemSize;
  line-height: $orbitItemSize;
  font-size: 3rem;
  border-radius: 50%;
  background: #ccc;
  color: #fff;
  text-align: center;
  display: block;
}

.orbit-wrap {
  height: 100vh;
  list-style: none;
  font-size: 2rem;

  > li {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);

    &:hover {
      ul {
        border-width: 4px;
        border-color: #fff;
        -webkit-animation-play-state: paused;
        -moz-animation-play-state: paused;
        -o-animation-play-state: paused;
        animation-play-state: paused;
      }
      ~ li ul {
        border-color: rgba(255, 255, 255, 0.2);
        li {
          opacity: 0.4;
        }
      }
      ul i {
        -webkit-animation-play-state: paused;
        -moz-animation-play-state: paused;
        -o-animation-play-state: paused;
        animation-play-state: paused;
      }
    }
  }
}

ul[class^="ring"] {
  @extend %ring;
  transition: all 300ms ease-in-out;
  li {
    @extend %orbiting-object;
    transition: all 300ms ease-in-out;
  }
}

@mixin orbit-item($numItems, $numRing) {
  @for $s from 1 through $numItems {
    // Spread items over the ring
    $deg: 380deg / $numItems;

    .ring-#{$numRing} > *:nth-of-type(#{$s}) {
      transform: rotate($s * $deg)
        translate(12.5em - ($numRing * 2.5))
        rotate(-$s * $deg);
    }
  }
}

// Render rings
@for $i from 0 through $lastRing {
  .ring-#{$i} {
    // decrease each ring in size
    width: 25em - ($i * 5);
    height: 25em - ($i * 5);
    animation: clockwiseRotate 35s - ($i * 5) linear infinite;

    i {
      animation: counterClockwiseRotate 35s - ($i * 5) linear infinite;
    }
  }

  @include orbit-item(map-get($map, ring-#{$i}), $i);
}

%ring {
  // border: solid 1px rgba(33, 150, 243, 0.8);
  border: solid 2px rgba($color-grey-light-2, 0.8);
  position: relative;
  padding: 0;
  border-radius: 50%;
  list-style: none;
  box-sizing: content-box;
}

%orbiting-object {
  display: block;
  position: absolute;
  top: 50%;
  left: 50%;
  width: $orbitItemSize;
  height: $orbitItemSize;
  margin: -$orbitItemSize / 2;
}

/*
  center;
*/
.orbit-center {
  z-index: 5;
  font-size: 4rem;
  width: 8rem;
  height: 8rem;
  line-height: 9rem;
  text-align: center;
  background: $color-secondary-dark;
  border-radius: 50%;

  &:hover .orbit-center__icon {
    transform: rotateZ(0deg);
  }
}
.orbit-center__icon {
  transform: rotateZ(-360deg);
  transition: all 300ms ease-in-out;
}
.orbit-wrap > li.orbit-center:hover ~ li > ul {
  width: 0;
  height: 0;
  * {
    transform: translate(0, 0);
  }
}

/* 
animations 
*/
@keyframes clockwiseRotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes counterClockwiseRotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(-360deg);
  }
}

/* 
icons 
*/
$icons: (
  ("js-square", #eed81c, black),
  ("css3-alt", white, #2196f3),
  ("react", #18b7e8, white),
  ("git", #ea4e32, white),
  ("terminal", #222, #20c20e),
  ("html5", white, #de4b25),
  ("sass", white, #c86395),
  ("graphql", white, #000),
  ("node-js", #87c001, white),
  ("python", #f8cd42, #356c9a),
  ("github-alt", white, black),
  ("postgres", white, black),
  ("heroku", white, black),
  ("swift", white, black)
);

@each $icon in $icons {
  .fa-#{nth($icon, 1)} {
    background: nth($icon, 2);
    color: nth($icon, 3);
  }
}

.graphqlLogo {
  height: 90%;
  width: 90%;
  margin-top: 2px;
}

.postgresLogo {
  height: 70%;
  width: 70%;
  margin-top: 8px;
}

.herokuLogo {
  height: 70%;
  width: 70%;
  margin-top: 8px;
}

.swiftLogo {
  height: 70%;
  width: 70%;
  margin-top: 5px;
}

.orbit-icon:hover .txt-skill {
  display: inline-block;
  background-color: #fff;
}

.orbit-icon:hover .txt-main {
  display: none;
}
